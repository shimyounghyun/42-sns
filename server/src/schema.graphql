type Chat {
  id: Int!
  messages: [Message]!
  participants: [User]!
  trip: Trip
  createdAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  user: User!
  createdAt: String!
  updatedAt: String
}

type AddDatesResponse {
  result: Boolean!
  error: String
}

type Mutation {
  AddDates(startAt: String!, endAt: String!): AddDatesResponse
  DeleteDates(datesId: Int!): DeleteDatesResponse
  EditDates(id: Int!, startAt: String, endAt: String): EditDatesResponse!
  AddPlace(name: String!, lat: Float!, lng: Float!, address: String!, isFav: Boolean!): AddPlaceResponse!
  DeletePlace(placeId: Int!): DeletePlaceResponse
  EditPlace(id: Int!, name: String, isFav: Boolean): EditPlaceResponse!
  IntraConnect(email: String!, userName: String!, firstName: String!, lastName: String!, profilePhoto: String!, intraId: String!): IntraConnectResponse
  SignUpIntra(email: String!, userName: String!, firstName: String!, lastName: String!, profilePhoto: String!, intraId: String!, password: String!): SignUpIntraResponse
  UpdateMyProfile(bio: String, profilePhoto: String): UpdateMyProfileResponse
  UpdatePassword(previousPassword: String!, presentPassword: String!): UpdatePasswordResponse
}

type DeleteDatesResponse {
  result: Boolean!
  error: String
}

type EditDatesResponse {
  result: Boolean!
  error: String
}

type GetDatesNearTripsResponse {
  result: Boolean!
  error: String
  trips: [Trip]
}

type Query {
  GetDatesNearTrips(dateId: Int!): GetDatesNearTripsResponse!
  GetMyDates: GetMyDatesResponse
  GetNearbyDates(dateId: Int!): GetNearbyDatesResponse!
  GetMyPlaces: GetMyPlacesResponse!
  GetNearbyPlaces(placeId: Int!): GetNearbyPlacesResponse!
  GetPlaceNearTrips(placeId: Int!): GetPlaceNearTripsResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse
  GetMyProfile: GetMyProfileResponse
  SignInIntra(intraId: String!): SignInIntraResponse
}

type GetMyDatesResponse {
  result: Boolean!
  error: String
  dates: [Dates]
}

type GetNearbyDatesResponse {
  result: Boolean!
  error: String
  dates: [Dates]
}

type Dates {
  id: Int!
  startAt: String!
  endAt: String!
  trips: [Trip]
  user: User!
  userId: Int!
  createdAt: String!
  updatedAt: String
}

type AddPlaceResponse {
  result: Boolean!
  error: String
}

type DeletePlaceResponse {
  result: Boolean!
  error: String
}

type EditPlaceResponse {
  result: Boolean!
  error: String
}

type GetMyPlacesResponse {
  result: Boolean!
  error: String
  places: [Place]
}

type GetNearbyPlacesResponse {
  result: Boolean!
  error: String
  places: [Place]
}

type GetPlaceNearTripsResponse {
  result: Boolean!
  error: String
  trips: [Trip]
}

type Place {
  id: Int!
  name: String!
  lat: Float!
  lng: Float!
  address: String!
  trips: [Trip]
  user: User!
  userId: Int!
  isFav: Boolean!
  createdAt: String!
  updatedAt: String
}

type AddTripResponse {
  result: Boolean!
  error: String
}

type Trip {
  id: Int!
  status: String!
  host: User!
  guest: User
  date: Dates
  chat: Chat
  place: Place
  placeLat: String
  placeLng: String
  createdAt: String!
  updatedAt: String
}

type EmailSignInResponse {
  result: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  result: Boolean!
  error: String
  user: User
}

type IntraConnectResponse {
  result: Boolean!
  error: String
  token: String
}

type User {
  id: Int!
  email: String!
  userName: String!
  firstName: String!
  lastName: String!
  fullName: String
  profilePhoto: String!
  bio: String
  password: String!
  places: [Place]
  dates: [Dates]
  chats: [Chat]
  messages: [Message]
  tripAsHost: [Trip]
  tripAsGuest: [Trip]
  intraId: String!
  createdAt: String!
  updatedAt: String
}

type SignInIntraResponse {
  result: Boolean!
  error: String
  token: String
}

type SignUpIntraResponse {
  result: Boolean!
  error: String
  token: String
}

type UpdateMyProfileResponse {
  result: Boolean!
  error: String
}

type UpdatePasswordResponse {
  result: Boolean!
  error: String
}
